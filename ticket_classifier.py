# -*- coding: utf-8 -*-
"""Ticket_classifier

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1taZi3fzSNy_C5HAKzDdin_dCs7OvLjy_
"""

import json

class TicketClassifier:
    """
    A service to classify banking support tickets, deciding between an
    AI-generated code remediation or a Vibe-coded troubleshooting script.
    """
    def __init__(self):
        """
        Initializes the classifier with predefined rules for classification.
        These rules are configurable and can be externalized in a production system.
        """
        self.rules = {
            # Keywords indicating a potential code-related issue
            "ai_code_patch_keywords": [
                "bug", "error", "malfunction", "code issue", "integration failure",
                "api problem", "backend error", "database error", "service outage",
                "system crash", "latency", "performance issue", "deployment failure"
            ],
            # Keywords indicating a common customer service issue resolvable by Vibe workflows
            "vibe_workflow_keywords": [
                "account access", "transaction dispute", "password reset", "login issue",
                "fraud alert", "kyc", "onboarding", "statement request", "billing inquiry",
                "payment problem", "card activation", "security alert"
            ],
            # Severity threshold for AI code patch consideration.
            # Using a list for AI severity to allow for "high" and "critical" to be handled similarly.
            "severity_for_ai_patch": ["high", "critical"],
            # Severity levels that strongly suggest a Vibe workflow if not an AI patch.
            "severity_for_vibe": ["medium", "low"],
            # Keywords that might indicate an immediate "Manual Review" if not caught by others,
            # or to catch ambiguous "high" severity cases.
            "manual_review_ambiguous_keywords": ["unclear", "investigate", "general inquiry", "other issue"]
        }

    def _check_keywords(self, text: str, keywords: list) -> list:
        """Helper to find matching keywords in a given text."""
        return [keyword for keyword in keywords if keyword in text]

    def classify_ticket(self, ticket_json: str) -> dict:
        """
        Classifies an incoming banking support ticket based on its content.

        Args:
            ticket_json: A JSON string describing the ticket
                         (expected fields: "channel", "severity", "summary").

        Returns:
            A dictionary containing the decision, reasoning, and a checklist of next actions.
            Returns an error response if JSON parsing fails.
        """
        try:
            ticket = json.loads(ticket_json)
        except json.JSONDecodeError:
            return {
                "decision": "Error",
                "reasoning": "Invalid JSON input provided. Please ensure the input is valid JSON.",
                "next_actions": ["1. Check ticket input format for JSON validity."]
            }

        # Extract and normalize ticket data
        channel = ticket.get("channel", "").lower()
        severity = ticket.get("severity", "").lower()
        summary = ticket.get("summary", "").lower()

        decision = "Manual Review Required" # Default decision
        reasoning = "Ticket summary and severity do not clearly align with automated criteria."
        next_actions = [
            "1. Manually review ticket details for proper categorization.",
            "2. Assign to the appropriate support tier.",
            "3. Consider if new rules or keywords need to be added to the classifier."
        ]

        # --- Decision Logic ---
        # Prioritize AI Code Patch for high-severity technical issues
        ai_matches = self._check_keywords(summary, self.rules["ai_code_patch_keywords"])
        if ai_matches and severity in self.rules["severity_for_ai_patch"]:
            decision = "AI Code Patch"
            reasoning = (f"Summary contains code-related keywords ('{', '.join(ai_matches)}') "
                         f"and severity is '{severity}'. This indicates a core system issue.")
            next_actions = [
                "1. Trigger the AI code analysis and remediation pipeline.",
                "2. Review AI-generated patch for correctness, security, and potential side effects.",
                "3. Coordinate with the development and QA teams for testing and deployment.",
                "4. Monitor system logs and performance post-deployment."
            ]
        # Otherwise, check for Vibe-coded troubleshooting scripts for common customer issues
        else:
            vibe_matches = self._check_keywords(summary, self.rules["vibe_workflow_keywords"])
            if vibe_matches or severity in self.rules["severity_for_vibe"]:
                decision = "Vibe-coded Troubleshooting Script"
                matched_reason = f"Summary contains customer service keywords ('{', '.join(vibe_matches)}')." if vibe_matches else ""
                severity_reason = f"Severity is '{severity}'." if severity in self.rules["severity_for_vibe"] else ""
                reasoning = f"{matched_reason}{' ' if matched_reason and severity_reason else ''}{severity_reason} This indicates a standard customer query or process-driven issue."
                next_actions = [
                    "1. Identify the most relevant Vibe troubleshooting workflow ID.",
                    "2. Initiate Vibe script execution with relevant ticket context.",
                    "3. Guide the support agent through the Vibe workflow steps and output.",
                    "4. Collect customer feedback and update ticket status."
                ]
            # Further refinement: If not AI or Vibe, but high severity, still push to manual review
            # unless specific manual review keywords are present
            elif severity in self.rules["severity_for_ai_patch"] or self._check_keywords(summary, self.rules["manual_review_ambiguous_keywords"]):
                 decision = "Manual Review Required"
                 reasoning = f"Ticket has high/critical severity ('{severity}') but does not match specific AI code patch criteria, or contains ambiguous keywords. Requires expert human assessment."
                 next_actions = [
                     "1. Immediately escalate to a senior support agent or technical lead.",
                     "2. Thoroughly investigate the issue and determine the appropriate team.",
                     "3. Update classification rules if this type of ticket becomes common."
                 ]

        return {
            "decision": decision,
            "reasoning": reasoning,
            "next_actions": next_actions
        }

# --- Example Usage (for demonstration and local testing) ---
if __name__ == "__main__":
    classifier = TicketClassifier()

    print("--- Test Cases ---")

    # 1. AI Code Patch - High Severity API Error
    ticket_ai_1 = '{"channel": "web", "severity": "high", "summary": "Login API returning 500 internal server error for all users. Backend service down."}'
    print("\nTicket 1 (AI Code Patch Expected):")
    print(json.dumps(classifier.classify_ticket(ticket_ai_1), indent=2))

    # 2. Vibe Workflow - Medium Severity Password Reset
    ticket_vibe_1 = '{"channel": "phone", "severity": "medium", "summary": "Customer unable to reset password, link not arriving."}'
    print("\nTicket 2 (Vibe Workflow Expected):")
    print(json.dumps(classifier.classify_ticket(ticket_vibe_1), indent=2))

    # 3. Manual Review - Ambiguous High Severity
    ticket_manual_1 = '{"channel": "email", "severity": "high", "summary": "Customer complaining about general system slowness, unclear root cause."}'
    print("\nTicket 3 (Manual Review Expected - Ambiguous High):")
    print(json.dumps(classifier.classify_ticket(ticket_manual_1), indent=2))

    # 4. Vibe Workflow - Low Severity Statement Request
    ticket_vibe_2 = '{"channel": "chat", "severity": "low", "summary": "Question about monthly statement format and delivery."}'
    print("\nTicket 4 (Vibe Workflow Expected):")
    print(json.dumps(classifier.classify_ticket(ticket_vibe_2), indent=2))

    # 5. AI Code Patch - Critical Database Issue
    ticket_ai_2 = '{"channel": "web", "severity": "critical", "summary": "Database connection error causing complete service outage."}'
    print("\nTicket 5 (AI Code Patch Expected - Critical):")
    print(json.dumps(classifier.classify_ticket(ticket_ai_2), indent=2))

    # 6. Invalid JSON Input
    ticket_invalid = '{"channel": "web", "severity": "high", "summary": "API error",}' # Trailing comma
    print("\nTicket 6 (Invalid JSON Expected):")
    print(json.dumps(classifier.classify_ticket(ticket_invalid), indent=2))

    # 7. Manual Review - No clear match
    ticket_no_match = '{"channel": "email", "severity": "medium", "summary": "I have a weird question about my bank account."}'
    print("\nTicket 7 (Manual Review Expected - No Clear Match):")
    print(json.dumps(classifier.classify_ticket(ticket_no_match), indent=2))





